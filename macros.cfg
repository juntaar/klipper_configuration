# Slicer Settings
#
# Replace the slicer's custom start and end g-code scripts with
# START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} 
# and END_PRINT.
#
# For PrusaSlicer, untick the "Emit Temperature commands automatically" setting

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMPERATURE = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMPERATURE = params.EXTRUDER_TEMP|default(190)|float %}
    {% set EXTRUDER_IDLE_TEMPERATURE = params.EXTRUDER_TEMP|default(150)|float %}
    {% set DISABLE_ADAPTIVE_PURGE = params.ADAPTIVE_PURGE_DISABLED|default(0)|int %}
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 FUZZ_ENABLE=0 ; configure KAMP
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    M140 S{BED_TEMPERATURE} ; set final bed temp, to allow time to heat up, no waiting
    M104 S{EXTRUDER_IDLE_TEMPERATURE} ; set idle nozzle temp
    G28 ; home all axis
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE ; KAMP adaptive meshing
    M104 S{EXTRUDER_TEMPERATURE} ; set final nozzle temp
    G1 Z10 F240 ; lower bed
    G1 X2.0 Y10 F6000 ; move prior to purging
    M190 S{BED_TEMPERATURE} ; wait for bed temp to stabilize
    M109 S{EXTRUDER_TEMPERATURE} ; wait for nozzle temp to stabilize
    {% if params.ADAPTIVE_PURGE_DISABLED == 1 %}
        ;PrusaSlicer purge routine
        G1 Z0.28 F240 ; set nozzle height
        G92 E0
        G1 X2.0 Y140 E10 F1500 ; prime the nozzle
        G1 X2.3 Y140 F5000
        G92 E0
        G1 X2.3 Y10 E10 F1200 ; prime the nozzle
        G92 E0
    {% else %}
        LINE_PURGE ; purge nozzle using KAMP adaptive purge
    {% endif %}

[gcode_macro END_PRINT]
gcode:
    ;this hosts the previous PrusaSlicer default
    ;{if max_layer_z < max_print_height}G1 Z{z_offset+min(max_layer_z+2, max_print_height)} F600{endif} ; Move print bed down
    ;G1 X50 Y50 F{travel_speed*60} ; move print head out of the way
    ;{if max_layer_z < max_print_height-10}G1 Z{z_offset+max_print_height-10} F600{endif} ; Move print bed close to the bottom
    ;M140 S0 ; turn off heatbed
    ;M104 S0 ; turn off temperature
    ;M107 ; turn off fan
    ;M84 X Y E ; disable motors

    ;; Planned porting of PrusaSlicer code:
    ;{% if gcode_move.homing_origin.z >= Magic Number %}
    ;    Do Something as per below
    ;{% else %}
    ;    Do Something else to be determined
    ;{% endif %}

    #Fix-up extruder
    RESPOND MSG="Print Finished"
    G91
    G1 E-.5 Z0.2 F2400
    G1 X5 Y5 F6000
    G1 Z10
    G90

    #Present print
    G1 Z{printer.toolhead.position.z + 10} F600
    G1 X0 Y220 F6000
    M106 S0
    M104 S0
    M140 S0

    #Disable Steppers
    M84 X Y E

# provide button on Mainsail interface to do a screw adjustment
[gcode_macro AUTO_SCREW_ADJUST]
gcode:
    SCREWS_TILT_CALCULATE

[gcode_macro CAM]
gcode: 
    SET_LED LED=cam_chain RED=1 GREEN=0 BLUE=0 SYNC=0
    
[gcode_macro WHITE]
gcode: 
    _SET_NOZZLE_LIGHT

[gcode_macro BLUE]
gcode: 
    _SET_COMPLETION_LIGHT

[gcode_macro YELLOW]
gcode: 
    _SET_WARNING_LIGHT

[gcode_macro RED]
gcode: 
    _SET_ERROR_LIGHT

[gcode_macro DRIVE_LED]
description: Generic LED drive macro for 16 LED chain. Usage: DRIVE_LED [LED=<chain name>] [R=<red value>] [G=<green value>] [B=<blue value)] [HALF=<value>]
gcode:
    # read parameters
    # led: allowable value is right_chain, left_chain
    {% set led = params.LED|default("right_chain") %}
    {% set chain_len = 16 %}
    {% set tx = 0 %}
    M118 Setting {params.LED} {params.R} {params.G} {params.B} {params.HALF}
    # R,G,B: allowable value is 0 to 1
    {% set R = (params.R|default(1)|int, 1)|max %}
    {% set G = (params.G|default(1)|int, 1)|max %}
    {% set B = (params.B|default(1)|int, 1)|max %}
    # half: allowable value is true, false. true sets only the 2nd half of the chain length.
    {% set half = params.HALF|default(0)|int %}
    # iterate over the positions in the chain, 0 to chain_len -1 (16 total)
    {% for pos in range(chain_len) %}
        # check for last chain position, if so set transmit flag to 1
        {% if (pos+1) == chain_len %}
            {% set tx = 1 %}
        {% endif %}
        #M118 {pos},{half}
        {% if (half == 0) or (pos >= (chain_len / 2)) %}
            #M118 SET {pos+1},{R}.{G}.{B},{tx}
            SET_LED LED={led} RED={R} GREEN={G} BLUE={B} INDEX={pos+1} TRANSMIT={tx} SYNC=0
        {% endif %}
    {% endfor %}


[gcode_macro TEST_SET_NOZZLE_LIGHT]
description: Run the test program for DRIVE_LED
gcode:
    DRIVE_LED LED=left_chain HALF=1
    DRIVE_LED LED=right_chain HALF=0

# set nozzle light to on, disable remaining lights
[gcode_macro _SET_NOZZLE_LIGHT]
description: Set both LED chains, upper half on
gcode:
    M118 SETTING R=255, G=255, B=255, HALF ONLY
    DRIVE_LED LED=left_chain R=1 G=1 B=1 HALF=1
    DRIVE_LED LED=right_chain R=1 G=1 B=1 HALF=1
    SET_LED LED=cam_chain RED=1 GREEN=1 BLUE=1 SYNC=0

# set both lights to printer blue - R=0, G=187, B=232
[gcode_macro _SET_COMPLETION_LIGHT]
description: Set both LED chains, full chain, printer blue
gcode:
    #SET_LIGHTS_OFF
    M118 SETTING R=0, G=187, B=232
    DRIVE_LED LED=left_chain R=0 G=0.73 B=0.91 HALF=0
    DRIVE_LED LED=right_chain R=0 G=0.73 B=0.91 HALF=0
    SET_LED LED=cam_chain RED=0 GREEN=0 BLUE=0 SYNC=0

# set both lights to warning yellow - R=255, G=230, B=0
[gcode_macro _SET_WARNING_LIGHT]
description: Set both LED chains, full chain, warning yellow
gcode:
    M118 SETTING R=255, G=230, B=0
    SET_LED LED=left_chain RED=0.1 GREEN=0.05 BLUE=0 SYNC=0 
    SET_LED LED=right_chain RED=1.0 GREEN=0.9 BLUE=0 SYNC=0 
    SET_LED LED=cam_chain RED=0 GREEN=0 BLUE=0 SYNC=0

# set both lights to error red - R=255, G=0, B=0
[gcode_macro _SET_ERROR_LIGHT]
description: Set both LED chains, full chain, error red
gcode:
    M118 SETTING R=255, G=0, B=0
    SET_LED LED=left_chain RED=0.1 GREEN=0 BLUE=0 SYNC=0 
    SET_LED LED=right_chain RED=0.7 GREEN=0 BLUE=0 SYNC=0 
    SET_LED LED=cam_chain RED=0 GREEN=0 BLUE=0 SYNC=0

# set all lights off
[gcode_macro SET_LIGHTS_OFF]
description: Set all LEDs to off
gcode:
    _SET_LEFT_LIGHT_OFF 
    _SET_RIGHT_LIGHT_OFF
    _SET_CAM_LIGHT_OFF

# set left LED chain off
[gcode_macro _SET_LEFT_LIGHT_OFF]
description: Set left LED chain to off
gcode:
    SET_LED LED=left_chain RED=0 GREEN=0 BLUE=0 SYNC=0 

# set right LED chain off
[gcode_macro _SET_RIGHT_LIGHT_OFF]
description: Set right LED chain to off
gcode:
    SET_LED LED=right_chain RED=0 GREEN=0 BLUE=0 SYNC=0 

# set cam LED chain off
[gcode_macro _SET_CAM_LIGHT_OFF]
description: Set camera LED chain to off
gcode:
    SET_LED LED=cam_chain RED=0 GREEN=0 BLUE=0 SYNC=0 
    
# set lights upon startup to completion state
[delayed_gcode SET_STARTUP_STATE]
initial_duration: 1
gcode:
    BED_MESH_PROFILE LOAD=default
    _SET_COMPLETION_LIGHT

# convenient macro for moving the bed down 100mm
[gcode_macro Z+100]
    G91
    G1 Z+100 F1500
    G90

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.
[pause_resume]

[gcode_macro M600]
description: Implementation of M600 for a manual filament change. Drives extruder head to front of machine to aid in changing. Requires re-homing following.
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    # send discord notification
    {% set MSG = params.MSG|default("@everyone :warning: Manual Filament Change Required")|string %}
    {action_call_remote_method("notify", name="my_discord_notifier", message=MSG)}
    # resume filament change
    M118 Manual Filament Change Triggered
    #{ set var_M600_pause = true }
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

# query the ambient sensor for temperature and humidity
[gcode_macro QUERY_Ambient_Sensor]
description: Query the ambient environmental sensor
gcode:
    #{% set sensor = printer["htu21d Ambient"] %}
    {% set sensor = printer["temperature_sensor Ambient"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.humidity))}

# extended bed mesh calibration at temperature
[gcode_macro BED_MESH_CAL_AT_TEMP]
description: Conduct a bed mesh calibration at 60C
gcode:
    _SET_WARNING_LIGHT
    # set bed temperature to 60C, don't wait
    M140 S60
    # home if required
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
    # set and wait for bed to heat to 60C
    M190 S60
    # conduct calibration
    BED_MESH_CALIBRATE METHOD=automatic
    # complete the calibration
    TURN_OFF_HEATERS
    # move the extruder to the centre
    G91
    G1 Z+25 F1500
    G90
    G1 X110.0 Y110.0 F3000
    _SET_COMPLETION_LIGHT

# bed heat macro
[gcode_macro HEAT_BED]
description: Pre-heat the bed to 60C for PLA  printing
gcode:
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60